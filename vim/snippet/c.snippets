snippet header
#ifndef ${1}${2:`!p snip.rv = snip.fn.replace(".", "_") + "_"`}
#define $1$2
${0}
#endif
endsnippet

snippet inc
#include <${0}>
endsnippet

snippet incl
#include "${0}"
endsnippet

snippet if
if (${1}) {
    ${0}
}
endsnippet

snippet ifelse
if (${1}) {
    ${2}
} else {
    ${0}
}
endsnippet

snippet ifelseif
if (${1}) {
    ${2}
} else if (${3}) {
    ${4}
} else {
    ${0}
}
endsnippet

snippet for
for (${1}; ${2}; ${3}) {
    ${0}
}
endsnippet

snippet fori
for (${1:int} ${2:i} = ${3:0}; $2 < ${4:count}; ${5}++$2) {
    ${0}
}
endsnippet

snippet switch
switch (${1}) {
case ${3}:
    ${0}
    break;
default:
    ${2}
    break;
}
endsnippet

snippet case
case ${1}:
    ${0}
    break;
endsnippet

snippet while
while (${1}) {
    ${0}
}
endsnippet

snippet do
do {
    ${0}
} while (${1});
endsnippet

snippet return
return ${0};
endsnippet

snippet fund
${1:void} ${2:foo}(${3});
endsnippet

snippet func
${1:void} ${2:foo}(${3}) {
    ${0}
}
endsnippet

snippet struct
struct ${1} {
    ${0}
};
endsnippet

snippet main
int main(int argc, char* argv[]) {
    ${0}
    return 0;
}
endsnippet

# vim:ft=snippets:
